from __future__ import annotations
import typing
import usdrt.Sdf._Sdf
import usdrt.Usd._Usd
__all__: list[str] = ['AttributeType', 'ConnectableAPI', 'ConnectionModification', 'ConnectionSourceInfo', 'CoordSysAPI', 'Input', 'Material', 'MaterialBindingAPI', 'NodeDefAPI', 'NodeGraph', 'Output', 'Shader', 'Tokens', 'Utils']
class AttributeType:
    """
    Members:
    
      Invalid
    
      Input
    
      Output
    """
    Input: typing.ClassVar[AttributeType]  # value = <AttributeType.Input: 1>
    Invalid: typing.ClassVar[AttributeType]  # value = <AttributeType.Invalid: 0>
    Output: typing.ClassVar[AttributeType]  # value = <AttributeType.Output: 2>
    __members__: typing.ClassVar[dict[str, AttributeType]]  # value = {'Invalid': <AttributeType.Invalid: 0>, 'Input': <AttributeType.Input: 1>, 'Output': <AttributeType.Output: 2>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ConnectableAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    @typing.overload
    def ConnectToSource(shadingAttr: usdrt.Usd._Usd.Attribute, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool:
        ...
    @staticmethod
    @typing.overload
    def ConnectToSource(input: Input, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool:
        ...
    @staticmethod
    @typing.overload
    def ConnectToSource(output: Output, source: ConnectionSourceInfo, mod: ConnectionModification = ...) -> bool:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateInput(self, name: TfToken, type: usdrt.Sdf._Sdf.ValueTypeName) -> Input:
        ...
    def CreateOutput(self, name: TfToken, typeName: usdrt.Sdf._Sdf.ValueTypeName) -> Output:
        ...
    def GetInput(self, name: TfToken) -> Input:
        ...
    def GetInputs(self, onlyAuthored: bool = True) -> list[Input]:
        ...
    def GetOutput(self, name: TfToken) -> Output:
        ...
    def GetOutputs(self, onlyAuthored: bool = True) -> list[Output]:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class ConnectionModification:
    """
    Members:
    
      Replace
    
      Prepend
    
      Append
    """
    Append: typing.ClassVar[ConnectionModification]  # value = <ConnectionModification.Append: 2>
    Prepend: typing.ClassVar[ConnectionModification]  # value = <ConnectionModification.Prepend: 1>
    Replace: typing.ClassVar[ConnectionModification]  # value = <ConnectionModification.Replace: 0>
    __members__: typing.ClassVar[dict[str, ConnectionModification]]  # value = {'Replace': <ConnectionModification.Replace: 0>, 'Prepend': <ConnectionModification.Prepend: 1>, 'Append': <ConnectionModification.Append: 2>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class ConnectionSourceInfo:
    __hash__: typing.ClassVar[None] = None
    source: ...
    sourceName: str
    sourceType: ...
    typeName: usdrt.Sdf._Sdf.ValueTypeName
    def IsValid(self) -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    def __eq__(self, arg0: ConnectionSourceInfo) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, source: ..., sourceName: TfToken, sourceType: ..., typeName: usdrt.Sdf._Sdf.ValueTypeName = ...) -> None:
        ...
    @typing.overload
    def __init__(self, input: ...) -> None:
        ...
    @typing.overload
    def __init__(self, output: ...) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Stage, arg1: usdrt.Sdf._Sdf.Path) -> None:
        ...
    def __ne__(self, arg0: ConnectionSourceInfo) -> bool:
        ...
    def __repr__(self) -> str:
        ...
class CoordSysAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Input:
    @staticmethod
    def IsInput(attr: usdrt.Usd._Usd.Attribute) -> bool:
        ...
    @typing.overload
    def ConnectToSource(self, sourceInput: Input) -> bool:
        ...
    @typing.overload
    def ConnectToSource(self, sourceInput: ...) -> bool:
        ...
    def Get(self, time: usdrt.Usd._Usd.TimeCode = ...) -> typing.Any:
        ...
    def GetAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetBaseName(self) -> TfToken:
        ...
    def GetFullName(self) -> TfToken:
        ...
    def GetPrim(self) -> usdrt.Usd._Usd.Prim:
        ...
    def GetTypeName(self) -> usdrt.Sdf._Sdf.ValueTypeName:
        ...
    def IsDefined(self) -> bool:
        ...
    def Set(self, value: typing.Any, time: usdrt.Usd._Usd.TimeCode = ...) -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    def __init__(self) -> None:
        ...
class Material(NodeGraph):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Material:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateDisplacementAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDisplacementOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def CreateSurfaceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSurfaceOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def CreateVolumeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateVolumeOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def GetDisplacementAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDisplacementOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def GetDisplacementOutputs(self) -> list[Output]:
        ...
    def GetSurfaceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSurfaceOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def GetSurfaceOutputs(self) -> list[Output]:
        ...
    def GetVolumeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetVolumeOutput(self, renderContext: TfToken = '') -> Output:
        ...
    def GetVolumeOutputs(self) -> list[Output]:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class MaterialBindingAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> MaterialBindingAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def Bind(self, material: Material, bindingStrength: TfToken = 'fallbackStrength', materialPurpose: TfToken = '') -> bool:
        ...
    def ComputeBoundMaterial(self, materialPurpose: TfToken = '') -> tuple:
        ...
    def UnbindAllBindings(self) -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class NodeDefAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> NodeDefAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateImplementationSourceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetImplementationSource(self) -> TfToken:
        ...
    def GetImplementationSourceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShaderId(self) -> typing.Any:
        ...
    def GetSourceAsset(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def GetSourceAssetSubIdentifier(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def GetSourceCode(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def SetShaderId(self, arg0: TfToken) -> bool:
        ...
    def SetSourceAsset(self, sourceAsset: usdrt.Sdf._Sdf.AssetPath, sourceType: TfToken = '') -> bool:
        ...
    def SetSourceAssetSubIdentifier(self, subIdentifier: TfToken, sourceType: TfToken = '') -> bool:
        ...
    def SetSourceCode(self, sourceCode: str, sourceType: TfToken = '') -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class NodeGraph(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> NodeGraph:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def ComputeOutputSource(self, outputName: TfToken) -> tuple:
        ...
    def ConnectableAPI(self) -> ...:
        ...
    def CreateInput(self, name: TfToken, type: usdrt.Sdf._Sdf.ValueTypeName) -> Input:
        ...
    def CreateOutput(self, name: TfToken, typeName: usdrt.Sdf._Sdf.ValueTypeName) -> Output:
        ...
    def GetInput(self, name: TfToken) -> Input:
        ...
    def GetInputs(self, onlyAuthored: bool = True) -> list[Input]:
        ...
    def GetOutput(self, name: TfToken) -> Output:
        ...
    def GetOutputs(self, onlyAuthored: bool = True) -> list[Output]:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    @typing.overload
    def __init__(self, connectable: ...) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Output:
    @staticmethod
    def IsOutput(attr: usdrt.Usd._Usd.Attribute) -> bool:
        ...
    @typing.overload
    def ConnectToSource(self, sourceInput: Input) -> bool:
        ...
    @typing.overload
    def ConnectToSource(self, sourceOutput: Output) -> bool:
        ...
    def GetAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetBaseName(self) -> TfToken:
        ...
    def GetFullName(self) -> TfToken:
        ...
    def GetPrim(self) -> usdrt.Usd._Usd.Prim:
        ...
    def GetTypeName(self) -> usdrt.Sdf._Sdf.ValueTypeName:
        ...
    def IsDefined(self) -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Attribute) -> None:
        ...
class Shader(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Shader:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def ConnectableAPI(self) -> ...:
        ...
    def CreateIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateImplementationSourceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInput(self, name: TfToken, type: usdrt.Sdf._Sdf.ValueTypeName) -> Input:
        ...
    def CreateOutput(self, name: TfToken, type: usdrt.Sdf._Sdf.ValueTypeName) -> Output:
        ...
    def GetIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetImplementationSource(self) -> TfToken:
        ...
    def GetImplementationSourceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInput(self, name: TfToken) -> Input:
        ...
    def GetInputs(self, onlyAuthored: bool = True) -> list[Input]:
        ...
    def GetOutput(self, name: TfToken) -> Output:
        ...
    def GetOutputs(self, onlyAuthored: bool = True) -> list[Output]:
        ...
    def GetShaderId(self) -> typing.Any:
        ...
    def GetSourceAsset(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def GetSourceAssetSubIdentifier(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def GetSourceCode(self, sourceType: TfToken = '') -> typing.Any:
        ...
    def SetShaderId(self, arg0: TfToken) -> bool:
        ...
    def SetSourceAsset(self, sourceAsset: usdrt.Sdf._Sdf.AssetPath, sourceType: TfToken = '') -> bool:
        ...
    def SetSourceAssetSubIdentifier(self, subIdentifier: TfToken, sourceType: TfToken = '') -> bool:
        ...
    def SetSourceCode(self, sourceCode: str, sourceType: TfToken = '') -> bool:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    @typing.overload
    def __init__(self, connectable: ...) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Tokens:
    allPurpose: typing.ClassVar[str] = ''
    bindMaterialAs: typing.ClassVar[str] = 'bindMaterialAs'
    coordSys: typing.ClassVar[str] = 'coordSys:'
    displacement: typing.ClassVar[str] = 'displacement'
    fallbackStrength: typing.ClassVar[str] = 'fallbackStrength'
    full: typing.ClassVar[str] = 'full'
    id: typing.ClassVar[str] = 'id'
    infoId: typing.ClassVar[str] = 'info:id'
    infoImplementationSource: typing.ClassVar[str] = 'info:implementationSource'
    inputs: typing.ClassVar[str] = 'inputs:'
    interfaceOnly: typing.ClassVar[str] = 'interfaceOnly'
    materialBind: typing.ClassVar[str] = 'materialBind'
    materialBinding: typing.ClassVar[str] = 'material:binding'
    materialBindingCollection: typing.ClassVar[str] = 'material:binding:collection'
    materialVariant: typing.ClassVar[str] = 'materialVariant'
    outputs: typing.ClassVar[str] = 'outputs:'
    outputsDisplacement: typing.ClassVar[str] = 'outputs:displacement'
    outputsSurface: typing.ClassVar[str] = 'outputs:surface'
    outputsVolume: typing.ClassVar[str] = 'outputs:volume'
    preview: typing.ClassVar[str] = 'preview'
    sdrMetadata: typing.ClassVar[str] = 'sdrMetadata'
    sourceAsset: typing.ClassVar[str] = 'sourceAsset'
    sourceCode: typing.ClassVar[str] = 'sourceCode'
    strongerThanDescendants: typing.ClassVar[str] = 'strongerThanDescendants'
    subIdentifier: typing.ClassVar[str] = 'subIdentifier'
    surface: typing.ClassVar[str] = 'surface'
    universalRenderContext: typing.ClassVar[str] = ''
    universalSourceType: typing.ClassVar[str] = ''
    volume: typing.ClassVar[str] = 'volume'
    weakerThanDescendants: typing.ClassVar[str] = 'weakerThanDescendants'
class Utils:
    @staticmethod
    def GetBaseNameAndType(fullName: TfToken) -> tuple:
        ...
    @staticmethod
    def GetPrefixForAttributeType(sourceType: AttributeType) -> str:
        ...
