from __future__ import annotations
import typing
import usdrt.Usd._Usd
__all__: list[str] = ['PhysxForceFieldAPI', 'PhysxForceFieldConicalAPI', 'PhysxForceFieldDragAPI', 'PhysxForceFieldLinearAPI', 'PhysxForceFieldNoiseAPI', 'PhysxForceFieldPlanarAPI', 'PhysxForceFieldRingAPI', 'PhysxForceFieldSphericalAPI', 'PhysxForceFieldSpinAPI', 'PhysxForceFieldWindAPI', 'Tokens']
class PhysxForceFieldAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateEnabledAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreatePositionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRangeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSurfaceAreaScaleEnabledAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSurfaceSampleDensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetEnabledAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetPositionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRangeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSurfaceAreaScaleEnabledAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSurfaceSampleDensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldConicalAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldConicalAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreatePowerFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetPowerFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldDragAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldDragAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateMinimumSpeedAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetMinimumSpeedAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldLinearAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldLinearAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldNoiseAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldNoiseAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateAmplitudeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDragAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAmplitudeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDragAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldPlanarAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldPlanarAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateNormalAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetNormalAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldRingAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldRingAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateNormalAxisAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpinConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpinInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpinLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetNormalAxisAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSpinConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSpinInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSpinLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldSphericalAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldSphericalAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldSpinAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldSpinAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpinAxisAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetConstantAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInverseSquareAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLinearAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetSpinAxisAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PhysxForceFieldWindAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim, name: TfToken) -> PhysxForceFieldWindAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateAverageDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateAverageSpeedAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDirectionVariationAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDirectionVariationFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDragAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpeedVariationAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpeedVariationFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAverageDirectionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAverageSpeedAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDirectionVariationAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDirectionVariationFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDragAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetName(self) -> TfToken:
        ...
    def GetSpeedVariationAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSpeedVariationFrequencyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim, arg1: TfToken) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase, arg1: TfToken) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Tokens:
    forceFieldBodies: typing.ClassVar[str] = 'forceFieldBodies'
    physxForceField: typing.ClassVar[str] = 'physxForceField'
    physxForceFieldConicalAngle: typing.ClassVar[str] = 'physxForceFieldConical:angle'
    physxForceFieldConicalConstant: typing.ClassVar[str] = 'physxForceFieldConical:constant'
    physxForceFieldConicalInverseSquare: typing.ClassVar[str] = 'physxForceFieldConical:inverseSquare'
    physxForceFieldConicalLinear: typing.ClassVar[str] = 'physxForceFieldConical:linear'
    physxForceFieldConicalLinearFalloff: typing.ClassVar[str] = 'physxForceFieldConical:linearFalloff'
    physxForceFieldConicalPowerFalloff: typing.ClassVar[str] = 'physxForceFieldConical:powerFalloff'
    physxForceFieldDragLinear: typing.ClassVar[str] = 'physxForceFieldDrag:linear'
    physxForceFieldDragMinimumSpeed: typing.ClassVar[str] = 'physxForceFieldDrag:minimumSpeed'
    physxForceFieldDragSquare: typing.ClassVar[str] = 'physxForceFieldDrag:square'
    physxForceFieldEnabled: typing.ClassVar[str] = 'physxForceField:enabled'
    physxForceFieldLinearConstant: typing.ClassVar[str] = 'physxForceFieldLinear:constant'
    physxForceFieldLinearDirection: typing.ClassVar[str] = 'physxForceFieldLinear:direction'
    physxForceFieldLinearInverseSquare: typing.ClassVar[str] = 'physxForceFieldLinear:inverseSquare'
    physxForceFieldLinearLinear: typing.ClassVar[str] = 'physxForceFieldLinear:linear'
    physxForceFieldNoiseAmplitude: typing.ClassVar[str] = 'physxForceFieldNoise:amplitude'
    physxForceFieldNoiseDrag: typing.ClassVar[str] = 'physxForceFieldNoise:drag'
    physxForceFieldNoiseFrequency: typing.ClassVar[str] = 'physxForceFieldNoise:frequency'
    physxForceFieldPlanarConstant: typing.ClassVar[str] = 'physxForceFieldPlanar:constant'
    physxForceFieldPlanarInverseSquare: typing.ClassVar[str] = 'physxForceFieldPlanar:inverseSquare'
    physxForceFieldPlanarLinear: typing.ClassVar[str] = 'physxForceFieldPlanar:linear'
    physxForceFieldPlanarNormal: typing.ClassVar[str] = 'physxForceFieldPlanar:normal'
    physxForceFieldPosition: typing.ClassVar[str] = 'physxForceField:position'
    physxForceFieldRange: typing.ClassVar[str] = 'physxForceField:range'
    physxForceFieldRingConstant: typing.ClassVar[str] = 'physxForceFieldRing:constant'
    physxForceFieldRingInverseSquare: typing.ClassVar[str] = 'physxForceFieldRing:inverseSquare'
    physxForceFieldRingLinear: typing.ClassVar[str] = 'physxForceFieldRing:linear'
    physxForceFieldRingNormalAxis: typing.ClassVar[str] = 'physxForceFieldRing:normalAxis'
    physxForceFieldRingRadius: typing.ClassVar[str] = 'physxForceFieldRing:radius'
    physxForceFieldRingSpinConstant: typing.ClassVar[str] = 'physxForceFieldRing:spinConstant'
    physxForceFieldRingSpinInverseSquare: typing.ClassVar[str] = 'physxForceFieldRing:spinInverseSquare'
    physxForceFieldRingSpinLinear: typing.ClassVar[str] = 'physxForceFieldRing:spinLinear'
    physxForceFieldSphericalConstant: typing.ClassVar[str] = 'physxForceFieldSpherical:constant'
    physxForceFieldSphericalInverseSquare: typing.ClassVar[str] = 'physxForceFieldSpherical:inverseSquare'
    physxForceFieldSphericalLinear: typing.ClassVar[str] = 'physxForceFieldSpherical:linear'
    physxForceFieldSpinConstant: typing.ClassVar[str] = 'physxForceFieldSpin:constant'
    physxForceFieldSpinInverseSquare: typing.ClassVar[str] = 'physxForceFieldSpin:inverseSquare'
    physxForceFieldSpinLinear: typing.ClassVar[str] = 'physxForceFieldSpin:linear'
    physxForceFieldSpinSpinAxis: typing.ClassVar[str] = 'physxForceFieldSpin:spinAxis'
    physxForceFieldSurfaceAreaScaleEnabled: typing.ClassVar[str] = 'physxForceField:surfaceAreaScaleEnabled'
    physxForceFieldSurfaceSampleDensity: typing.ClassVar[str] = 'physxForceField:surfaceSampleDensity'
    physxForceFieldWindAverageDirection: typing.ClassVar[str] = 'physxForceFieldWind:averageDirection'
    physxForceFieldWindAverageSpeed: typing.ClassVar[str] = 'physxForceFieldWind:averageSpeed'
    physxForceFieldWindDirectionVariation: typing.ClassVar[str] = 'physxForceFieldWind:directionVariation'
    physxForceFieldWindDirectionVariationFrequency: typing.ClassVar[str] = 'physxForceFieldWind:directionVariationFrequency'
    physxForceFieldWindDrag: typing.ClassVar[str] = 'physxForceFieldWind:drag'
    physxForceFieldWindSpeedVariation: typing.ClassVar[str] = 'physxForceFieldWind:speedVariation'
    physxForceFieldWindSpeedVariationFrequency: typing.ClassVar[str] = 'physxForceFieldWind:speedVariationFrequency'
