from __future__ import annotations
import typing
import usdrt.Sdf._Sdf
import usdrt.Usd._Usd
import usdrt.UsdGeom._UsdGeom
__all__: list[str] = ['BoundableLightBase', 'CylinderLight', 'DiskLight', 'DistantLight', 'DomeLight', 'GeometryLight', 'LightAPI', 'LightFilter', 'LightListAPI', 'ListAPI', 'MeshLightAPI', 'NonboundableLightBase', 'PluginLight', 'PluginLightFilter', 'PortalLight', 'RectLight', 'ShadowAPI', 'ShapingAPI', 'SphereLight', 'Tokens', 'VolumeLightAPI']
class BoundableLightBase(usdrt.UsdGeom._UsdGeom.Boundable):
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class CylinderLight(BoundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> CylinderLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLengthAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateTreatAsLineAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLengthAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetTreatAsLineAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class DiskLight(BoundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> DiskLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class DistantLight(NonboundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> DistantLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateIntensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetIntensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class DomeLight(NonboundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> DomeLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateGuideRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreatePortalsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateTextureFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateTextureFormatAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetGuideRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetPortalsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetTextureFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetTextureFormatAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class GeometryLight(NonboundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> GeometryLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateGeometryRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetGeometryRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class LightAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> LightAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateCollectionLightLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateCollectionShadowLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateColorTemperatureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDiffuseAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateEnableColorTemperatureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateExposureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateFiltersRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateIntensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateNormalizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSpecularAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetCollectionLightLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetCollectionShadowLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetColorTemperatureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDiffuseAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetEnableColorTemperatureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetExposureAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetFiltersRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetIntensityAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetNormalizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSpecularAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class LightFilter(usdrt.UsdGeom._UsdGeom.Xformable):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> LightFilter:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateCollectionFilterLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetCollectionFilterLinkIncludeRootAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class LightListAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> LightListAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightListCacheBehaviorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightListRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetLightListCacheBehaviorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightListRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class ListAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> ListAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightListCacheBehaviorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightListRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetLightListCacheBehaviorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightListRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class MeshLightAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> MeshLightAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class NonboundableLightBase(usdrt.UsdGeom._UsdGeom.Xformable):
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PluginLight(usdrt.UsdGeom._UsdGeom.Xformable):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> PluginLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PluginLightFilter(LightFilter):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> PluginLightFilter:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class PortalLight(BoundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> PortalLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class RectLight(BoundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> RectLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateHeightAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateTextureFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateWidthAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetHeightAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetTextureFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetWidthAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class ShadowAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> ShadowAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateShadowColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShadowDistanceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShadowEnableAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShadowFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShadowFalloffGammaAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShadowColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShadowDistanceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShadowEnableAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShadowFalloffAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShadowFalloffGammaAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class ShapingAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> ShapingAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateShapingConeAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingConeSoftnessAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingFocusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingFocusTintAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingIesAngleScaleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingIesFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateShapingIesNormalizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingConeAngleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingConeSoftnessAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingFocusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingFocusTintAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingIesAngleScaleAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingIesFileAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetShapingIesNormalizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class SphereLight(BoundableLightBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> SphereLight:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateTreatAsPointAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRadiusAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetTreatAsPointAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Tokens:
    angular: typing.ClassVar[str] = 'angular'
    automatic: typing.ClassVar[str] = 'automatic'
    collectionFilterLinkIncludeRoot: typing.ClassVar[str] = 'collection:filterLink:includeRoot'
    collectionLightLinkIncludeRoot: typing.ClassVar[str] = 'collection:lightLink:includeRoot'
    collectionShadowLinkIncludeRoot: typing.ClassVar[str] = 'collection:shadowLink:includeRoot'
    consumeAndContinue: typing.ClassVar[str] = 'consumeAndContinue'
    consumeAndHalt: typing.ClassVar[str] = 'consumeAndHalt'
    cubeMapVerticalCross: typing.ClassVar[str] = 'cubeMapVerticalCross'
    cylinderLight: typing.ClassVar[str] = 'CylinderLight'
    diskLight: typing.ClassVar[str] = 'DiskLight'
    distantLight: typing.ClassVar[str] = 'DistantLight'
    domeLight: typing.ClassVar[str] = 'DomeLight'
    extent: typing.ClassVar[str] = 'extent'
    filterLink: typing.ClassVar[str] = 'filterLink'
    geometry: typing.ClassVar[str] = 'geometry'
    geometryLight: typing.ClassVar[str] = 'GeometryLight'
    guideRadius: typing.ClassVar[str] = 'guideRadius'
    ignore: typing.ClassVar[str] = 'ignore'
    independent: typing.ClassVar[str] = 'independent'
    inputsAngle: typing.ClassVar[str] = 'inputs:angle'
    inputsColor: typing.ClassVar[str] = 'inputs:color'
    inputsColorTemperature: typing.ClassVar[str] = 'inputs:colorTemperature'
    inputsDiffuse: typing.ClassVar[str] = 'inputs:diffuse'
    inputsEnableColorTemperature: typing.ClassVar[str] = 'inputs:enableColorTemperature'
    inputsExposure: typing.ClassVar[str] = 'inputs:exposure'
    inputsHeight: typing.ClassVar[str] = 'inputs:height'
    inputsIntensity: typing.ClassVar[str] = 'inputs:intensity'
    inputsLength: typing.ClassVar[str] = 'inputs:length'
    inputsNormalize: typing.ClassVar[str] = 'inputs:normalize'
    inputsRadius: typing.ClassVar[str] = 'inputs:radius'
    inputsShadowColor: typing.ClassVar[str] = 'inputs:shadow:color'
    inputsShadowDistance: typing.ClassVar[str] = 'inputs:shadow:distance'
    inputsShadowEnable: typing.ClassVar[str] = 'inputs:shadow:enable'
    inputsShadowFalloff: typing.ClassVar[str] = 'inputs:shadow:falloff'
    inputsShadowFalloffGamma: typing.ClassVar[str] = 'inputs:shadow:falloffGamma'
    inputsShapingConeAngle: typing.ClassVar[str] = 'inputs:shaping:cone:angle'
    inputsShapingConeSoftness: typing.ClassVar[str] = 'inputs:shaping:cone:softness'
    inputsShapingFocus: typing.ClassVar[str] = 'inputs:shaping:focus'
    inputsShapingFocusTint: typing.ClassVar[str] = 'inputs:shaping:focusTint'
    inputsShapingIesAngleScale: typing.ClassVar[str] = 'inputs:shaping:ies:angleScale'
    inputsShapingIesFile: typing.ClassVar[str] = 'inputs:shaping:ies:file'
    inputsShapingIesNormalize: typing.ClassVar[str] = 'inputs:shaping:ies:normalize'
    inputsSpecular: typing.ClassVar[str] = 'inputs:specular'
    inputsTextureFile: typing.ClassVar[str] = 'inputs:texture:file'
    inputsTextureFormat: typing.ClassVar[str] = 'inputs:texture:format'
    inputsWidth: typing.ClassVar[str] = 'inputs:width'
    latlong: typing.ClassVar[str] = 'latlong'
    lightFilterShaderId: typing.ClassVar[str] = 'lightFilter:shaderId'
    lightFilters: typing.ClassVar[str] = 'light:filters'
    lightLink: typing.ClassVar[str] = 'lightLink'
    lightList: typing.ClassVar[str] = 'lightList'
    lightListCacheBehavior: typing.ClassVar[str] = 'lightList:cacheBehavior'
    lightMaterialSyncMode: typing.ClassVar[str] = 'light:materialSyncMode'
    lightShaderId: typing.ClassVar[str] = 'light:shaderId'
    materialGlowTintsLight: typing.ClassVar[str] = 'materialGlowTintsLight'
    meshLight: typing.ClassVar[str] = 'MeshLight'
    mirroredBall: typing.ClassVar[str] = 'mirroredBall'
    noMaterialResponse: typing.ClassVar[str] = 'noMaterialResponse'
    orientToStageUpAxis: typing.ClassVar[str] = 'orientToStageUpAxis'
    portalLight: typing.ClassVar[str] = 'PortalLight'
    portals: typing.ClassVar[str] = 'portals'
    rectLight: typing.ClassVar[str] = 'RectLight'
    shadowLink: typing.ClassVar[str] = 'shadowLink'
    sphereLight: typing.ClassVar[str] = 'SphereLight'
    treatAsLine: typing.ClassVar[str] = 'treatAsLine'
    treatAsPoint: typing.ClassVar[str] = 'treatAsPoint'
    volumeLight: typing.ClassVar[str] = 'VolumeLight'
class VolumeLightAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> VolumeLightAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateLightMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightMaterialSyncModeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetLightShaderIdAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
