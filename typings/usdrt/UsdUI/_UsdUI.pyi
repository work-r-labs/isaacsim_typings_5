from __future__ import annotations
import typing
import usdrt.Sdf._Sdf
import usdrt.Usd._Usd
__all__: list[str] = ['Backdrop', 'NodeGraphNodeAPI', 'SceneGraphPrimAPI', 'Tokens']
class Backdrop(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Backdrop:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateDescriptionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDescriptionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class NodeGraphNodeAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> NodeGraphNodeAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateDisplayColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateExpansionStateAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateIconAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreatePosAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateStackingOrderAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDisplayColorAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetExpansionStateAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetIconAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetPosAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSizeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetStackingOrderAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class SceneGraphPrimAPI(usdrt.Usd._Usd.APISchemaBase):
    @staticmethod
    def Apply(prim: usdrt.Usd._Usd.Prim) -> SceneGraphPrimAPI:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateDisplayGroupAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDisplayNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDisplayGroupAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDisplayNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Tokens:
    closed: typing.ClassVar[str] = 'closed'
    minimized: typing.ClassVar[str] = 'minimized'
    open: typing.ClassVar[str] = 'open'
    uiDescription: typing.ClassVar[str] = 'ui:description'
    uiDisplayGroup: typing.ClassVar[str] = 'ui:displayGroup'
    uiDisplayName: typing.ClassVar[str] = 'ui:displayName'
    uiNodegraphNodeDisplayColor: typing.ClassVar[str] = 'ui:nodegraph:node:displayColor'
    uiNodegraphNodeExpansionState: typing.ClassVar[str] = 'ui:nodegraph:node:expansionState'
    uiNodegraphNodeIcon: typing.ClassVar[str] = 'ui:nodegraph:node:icon'
    uiNodegraphNodePos: typing.ClassVar[str] = 'ui:nodegraph:node:pos'
    uiNodegraphNodeSize: typing.ClassVar[str] = 'ui:nodegraph:node:size'
    uiNodegraphNodeStackingOrder: typing.ClassVar[str] = 'ui:nodegraph:node:stackingOrder'
