from __future__ import annotations
import omni.core._core
import typing
import usdrt.Gf._Gf
import usdrt.Usd._Usd
import usdrt.helpers._helpers
__all__: list[str] = ['IUtils', 'SceneStatistics']
class IUtils(_IUtils):
    @typing.overload
    def __init__(self, arg0: omni.core._core.IObject) -> None:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    def acquire_or_create_rt_populator(self: _IUtils, populator_identifier: str, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, derived_data_stage_id: usdrt.helpers._helpers.UsdStageId) -> usdrt.helpers._helpers.PathC:
        ...
    def add_capsule(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, display_color: usdrt.Gf._Gf.Vec3f, fc_axis: ..., height: float, radius: float, has_animated_xform: bool, applied_schemas: typing.Sequence, material_id: usdrt.helpers._helpers.PathC, refinement_level: int, proto_index: int, instancer_path: usdrt.helpers._helpers.PathC, primvars: typing.Sequence) -> None:
        ...
    def add_cone(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, display_color: usdrt.Gf._Gf.Vec3f, fc_axis: ..., height: float, radius: float, has_animated_xform: bool, applied_schemas: typing.Sequence, material_id: usdrt.helpers._helpers.PathC, refinement_level: int, proto_index: int, instancer_path: usdrt.helpers._helpers.PathC, primvars: typing.Sequence) -> None:
        ...
    def add_cube(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, display_color: usdrt.Gf._Gf.Vec3f, size: float, has_animated_xform: bool, applied_schemas: typing.Sequence, material_id: usdrt.helpers._helpers.PathC, refinement_level: int, proto_index: int, instancer_path: usdrt.helpers._helpers.PathC, primvars: typing.Sequence) -> None:
        ...
    def add_cylinder(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, display_color: usdrt.Gf._Gf.Vec3f, fc_axis: ..., height: float, radius: float, has_animated_xform: bool, applied_schemas: typing.Sequence, material_id: usdrt.helpers._helpers.PathC, refinement_level: int, proto_index: int, instancer_path: usdrt.helpers._helpers.PathC, primvars: typing.Sequence) -> None:
        ...
    def add_geom_instance(self: _IUtils, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, prim_type: ..., proto_path: usdrt.helpers._helpers.PathC, proto_index: int, has_animated_xform: bool, material_id: usdrt.helpers._helpers.PathC, is_instance_root: bool) -> None:
        ...
    def add_instancer(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, has_animated_xform: bool, prototypes: typing.Sequence, proto_indices: typing.Sequence, translations: typing.Sequence, orientations: typing.Sequence, scales: typing.Sequence, applied_schemas: typing.Sequence, instancer_path: usdrt.helpers._helpers.PathC, proto_index: int, primvars: typing.Sequence) -> None:
        ...
    def add_sphere(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, display_color: usdrt.Gf._Gf.Vec3f, radius: float, has_animated_xform: bool, applied_schemas: typing.Sequence, material_id: usdrt.helpers._helpers.PathC, refinement_level: int, proto_index: int, instancer_path: usdrt.helpers._helpers.PathC, primvars: typing.Sequence) -> None:
        ...
    def apply_pending_usd_updates(self: _IUtils, usd_stage_id: usdrt.helpers._helpers.UsdStageId, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, time: float) -> None:
        ...
    def define_mesh_with_sizes(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, points: int, face_vertex_counts: int, face_vertex_indices: int, subsets: int, subset_indices: int, is_prototype: bool, primvars: typing.Sequence, time_varying_attributes: int, subdivision_scheme: ..., interpolate_boundary: ..., face_varying_linear_interpolation: ..., triangle_subdivision_rule: ..., crease_indices: int, crease_lengths: int, crease_sharpnesses: int, corner_indices: int, corner_sharpnesses: int, has_animated_xform: bool, applied_schemas: typing.Sequence, has_material: bool, hole_indices: int) -> None:
        ...
    def detach_material(self: _IUtils, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, prim_path_c: usdrt.helpers._helpers.PathC) -> None:
        ...
    def get_enable_usd_notice_handling(self: _IUtils, usd_stage_id: usdrt.helpers._helpers.UsdStageId) -> bool:
        ...
    def get_render_settings_prim_path(self: _IUtils, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId) -> usdrt.helpers._helpers.PathC:
        ...
    def is_populated(self: _IUtils, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId) -> bool:
        ...
    @typing.overload
    def populate_from_usd(self, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, usd_stage_id: usdrt.helpers._helpers.UsdStageId, prim_path_c: usdrt.helpers._helpers.PathC, time: float) -> typing.Any:
        ...
    @typing.overload
    def populate_from_usd(self, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, usd_stage_id: usdrt.helpers._helpers.UsdStageId, prim_path_cs: typing.Sequence, time: float, diff_mode: bool) -> typing.Any:
        ...
    def populate_xform_attributes(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, translation: usdrt.Gf._Gf.Vec3d, rotation: usdrt.Gf._Gf.Quatf, scale: usdrt.Gf._Gf.Vec3f, world_extent: usdrt.Gf._Gf.Range3d, applied_schemas: typing.Sequence) -> None:
        ...
    def release_rt_populator(self: _IUtils, populator_path_c: usdrt.helpers._helpers.PathC) -> None:
        ...
    def set_enable_usd_notice_handling(self: _IUtils, usd_stage_id: usdrt.helpers._helpers.UsdStageId, fabric_id: usdrt.helpers._helpers.FabricId, value: bool) -> None:
        ...
    def set_extent(self, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, local_extent: usdrt.Gf._Gf.Range3d, world_extent: usdrt.Gf._Gf.Range3d) -> None:
        ...
    def set_material_purpose(self: _IUtils, fabric_id: usdrt.helpers._helpers.FabricId, material_purpose_c: ...) -> None:
        ...
    def set_world_xform(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, xform: usdrt.Gf._Gf.Matrix4d, visibility: ..., world_visibility: bool) -> None:
        ...
    def set_xform_values(self, stage_id: usdrt.helpers._helpers.StageReaderWriterId, fc_path: usdrt.helpers._helpers.PathC, translation: usdrt.Gf._Gf.Vec3d, rotation: usdrt.Gf._Gf.Quatf, scale: usdrt.Gf._Gf.Vec3f, visibility: ..., world_visibility: bool) -> None:
        ...
    def synchronize_to_fabric(self: _IUtils, usd_stage_id: usdrt.helpers._helpers.UsdStageId, stage_reader_writer_id: usdrt.helpers._helpers.StageReaderWriterId, time_change: usdrt.Usd._Usd.Stage.TimeChange, time: usdrt.Usd._Usd.TimeCode) -> None:
        ...
class SceneStatistics:
    fabric_population_time: float
    num_geo_instance_proxies: int
    num_unique_materials: int
    num_usd_cameras: int
    num_usd_capsules: int
    num_usd_cones: int
    num_usd_cubes: int
    num_usd_cylinders: int
    num_usd_instances: int
    num_usd_materials: int
    num_usd_meshes: int
    num_usd_spheres: int
    resolver_time: float
    total_population_time: float
    ujitso_processing_time: float
    usd_traversal_time: float
    def __init__(self, num_usd_meshes: int, num_usd_materials: int, num_usd_cubes: int, num_usd_cylinders: int, num_usd_capsules: int, num_usd_instances: int, num_usd_spheres: int, num_usd_cones: int, num_usd_cameras: int, num_geo_instance_proxies: int, num_unique_materials: int, usd_traversal_time: float, fabric_population_time: float, ujitso_processing_time: float, resolver_time: float, total_population_time: float) -> None:
        ...
class _IUtils(omni.core._core.IObject):
    pass
