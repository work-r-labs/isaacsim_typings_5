from __future__ import annotations
import typing
import usdrt.Sdf._Sdf
import usdrt.Usd._Usd
__all__: list[str] = ['DenoisePass', 'Pass', 'Product', 'Settings', 'SettingsBase', 'Tokens', 'Var']
class DenoisePass(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> DenoisePass:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Pass(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Pass:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateCommandAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDenoiseEnableAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDenoisePassRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateFileNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInputPassesRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreatePassTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateRenderSourceRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetCommandAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDenoiseEnableAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDenoisePassRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetFileNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInputPassesRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetPassTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetRenderSourceRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Product(SettingsBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Product:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateOrderedVarsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateProductNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateProductTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetOrderedVarsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetProductNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetProductTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Settings(SettingsBase):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Settings:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateIncludedPurposesAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateMaterialBindingPurposesAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateProductsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateRenderingColorSpaceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetIncludedPurposesAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetMaterialBindingPurposesAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetProductsRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetRenderingColorSpaceAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class SettingsBase(usdrt.Usd._Usd.Typed):
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateAspectRatioConformPolicyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateCameraRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def CreateDataWindowNDCAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateDisableMotionBlurAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateInstantaneousShutterAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreatePixelAspectRatioAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateResolutionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetAspectRatioConformPolicyAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetCameraRel(self) -> usdrt.Usd._Usd.Relationship:
        ...
    def GetDataWindowNDCAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDisableMotionBlurAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetInstantaneousShutterAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetPixelAspectRatioAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetResolutionAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
class Tokens:
    adjustApertureHeight: typing.ClassVar[str] = 'adjustApertureHeight'
    adjustApertureWidth: typing.ClassVar[str] = 'adjustApertureWidth'
    adjustPixelAspectRatio: typing.ClassVar[str] = 'adjustPixelAspectRatio'
    aspectRatioConformPolicy: typing.ClassVar[str] = 'aspectRatioConformPolicy'
    camera: typing.ClassVar[str] = 'camera'
    color3f: typing.ClassVar[str] = 'color3f'
    command: typing.ClassVar[str] = 'command'
    cropAperture: typing.ClassVar[str] = 'cropAperture'
    dataType: typing.ClassVar[str] = 'dataType'
    dataWindowNDC: typing.ClassVar[str] = 'dataWindowNDC'
    denoiseEnable: typing.ClassVar[str] = 'denoise:enable'
    denoisePass: typing.ClassVar[str] = 'denoise:pass'
    disableMotionBlur: typing.ClassVar[str] = 'disableMotionBlur'
    expandAperture: typing.ClassVar[str] = 'expandAperture'
    fileName: typing.ClassVar[str] = 'fileName'
    full: typing.ClassVar[str] = 'full'
    includedPurposes: typing.ClassVar[str] = 'includedPurposes'
    inputPasses: typing.ClassVar[str] = 'inputPasses'
    instantaneousShutter: typing.ClassVar[str] = 'instantaneousShutter'
    intrinsic: typing.ClassVar[str] = 'intrinsic'
    lpe: typing.ClassVar[str] = 'lpe'
    materialBindingPurposes: typing.ClassVar[str] = 'materialBindingPurposes'
    orderedVars: typing.ClassVar[str] = 'orderedVars'
    passType: typing.ClassVar[str] = 'passType'
    pixelAspectRatio: typing.ClassVar[str] = 'pixelAspectRatio'
    preview: typing.ClassVar[str] = 'preview'
    primvar: typing.ClassVar[str] = 'primvar'
    productName: typing.ClassVar[str] = 'productName'
    productType: typing.ClassVar[str] = 'productType'
    products: typing.ClassVar[str] = 'products'
    raster: typing.ClassVar[str] = 'raster'
    raw: typing.ClassVar[str] = 'raw'
    renderSettingsPrimPath: typing.ClassVar[str] = 'renderSettingsPrimPath'
    renderSource: typing.ClassVar[str] = 'renderSource'
    renderingColorSpace: typing.ClassVar[str] = 'renderingColorSpace'
    resolution: typing.ClassVar[str] = 'resolution'
    sourceName: typing.ClassVar[str] = 'sourceName'
    sourceType: typing.ClassVar[str] = 'sourceType'
class Var(usdrt.Usd._Usd.Typed):
    @staticmethod
    def Define(stage: usdrt.Usd._Usd.Stage, path: usdrt.Sdf._Sdf.Path) -> Var:
        ...
    @staticmethod
    def GetSchemaTypeName() -> TfToken:
        ...
    def CreateDataTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSourceNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def CreateSourceTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetDataTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSourceNameAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def GetSourceTypeAttr(self) -> usdrt.Usd._Usd.Attribute:
        ...
    def __bool__(self) -> bool:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.Prim) -> None:
        ...
    @typing.overload
    def __init__(self, arg0: usdrt.Usd._Usd.SchemaBase) -> None:
        ...
    def __repr__(self) -> str:
        ...
