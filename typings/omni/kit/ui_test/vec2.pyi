from __future__ import annotations
import typing
__all__: list[str] = ['Vec2']
class Vec2:
    """
    Generic 2D Vector
    
        Constructed from other `Vec2`, tuple of 2 floats or just 2 floats. Common vector operation supported:
    
        .. code-block:: python
    
            v0 = Vec2(1, 2)
            v1 = Vec2((1, 2))
            v2 = Vec2(v1)
    
            print(v0 + v1) # (2, 4)
            print(v2 * 3) # (3, 6)
            print(v2 / 4) # (0.25, 0.5)
        
    """
    __hash__: typing.ClassVar[None] = None
    def __add__(self, other) -> Vec2:
        ...
    def __eq__(self, other):
        ...
    def __ge__(self, other):
        ...
    def __gt__(self, other):
        ...
    def __init__(self, *args):
        ...
    def __le__(self, other):
        ...
    def __lt__(self, other):
        ...
    def __mod__(self, scalar) -> Vec2:
        ...
    def __mul__(self, scalar) -> Vec2:
        ...
    def __ne__(self, other):
        ...
    def __neg__(self) -> Vec2:
        ...
    def __repr__(self) -> str:
        ...
    def __rmul__(self, scalar) -> Vec2:
        ...
    def __str__(self) -> str:
        ...
    def __sub__(self, other) -> Vec2:
        ...
    def __truediv__(self, scalar) -> Vec2:
        ...
    def to_tuple(self):
        ...
