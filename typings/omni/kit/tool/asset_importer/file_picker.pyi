from __future__ import annotations
import asyncio as asyncio
import carb as carb
import omni as omni
from omni.kit.tool.asset_importer.filebrowser import FileBrowserMode
from omni.kit.tool.asset_importer.filebrowser import FileBrowserSelectionType
from omni.kit.tool.asset_importer.filebrowser.app_filebrowser import FileBrowserUI
from omni.kit.widget.filebrowser.model import FileBrowserItem
from omni.kit.widget.prompt.prompt import PromptButtonInfo
from omni.kit.widget.prompt.prompt import PromptManager
import os as os
import traceback as traceback
__all__: list = ['FilePicker']
class FilePicker:
    def __init__(self, title: str, mode: omni.kit.tool.asset_importer.filebrowser.FileBrowserMode, file_type: omni.kit.tool.asset_importer.filebrowser.FileBrowserSelectionType, filter_options: typing.List[typing.Tuple[str, str]], save_extensions: typing.List[str] = list(), apply_button_name: str = '', allow_multi_selections = False, import_to_stage = False, options_pane_build_fn: typing.Callable[[typing.List[str]], bool] = None, on_selection_changed: typing.Callable[[typing.List[str]], bool] = None):
        ...
    def _build_options_pane(self, paths: typing.List[omni.kit.widget.filebrowser.model.FileBrowserItem]):
        ...
    def _on_cancel_open(self):
        ...
    def _on_file_open(self, paths: typing.List[str]):
        ...
    def _save_and_prompt_if_exists(self, file_path: str, file_save_handler: typing.Callable[[str], NoneType] = None):
        ...
    def _selection_changed(self, paths: typing.List[omni.kit.widget.filebrowser.model.FileBrowserItem]):
        ...
    def destroy(self):
        ...
    def set_cancel_fn(self, cancel_handler: typing.Callable[[], NoneType]):
        ...
    def set_current_directory(self, dir: str):
        ...
    def set_current_filename(self, filename: str):
        ...
    def set_file_selected_fn(self, file_open_handler: typing.Callable[[typing.List[str]], NoneType]):
        ...
    def show(self, dir: str = None, filename: str = None):
        ...
