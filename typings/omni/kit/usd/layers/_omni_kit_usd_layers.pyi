"""
pybind11 omni.kit.usd.layers bindings
"""
from __future__ import annotations
import carb.dictionary._dictionary
import carb.events._events
import typing
__all__: list[str] = ['ILayers', 'ILayersInstance', 'ILayersState', 'IWorkflowAutoAuthoring', 'IWorkflowLiveSyncing', 'IWorkflowSpecsLinking', 'IWorkflowSpecsLocking', 'LayerEditMode', 'LayerErrorType', 'LayerEventType', 'LiveSessionHandle', 'acquire_auto_authoring_interface', 'acquire_layers_interface', 'acquire_layers_state_interface', 'acquire_live_syncing_interface', 'acquire_specs_linking_interface', 'acquire_specs_locking_interface', 'release_auto_authoring_interface', 'release_layers_interface', 'release_layers_state_interface', 'release_live_syncing_interface', 'release_specs_linking_interface', 'release_specs_locking_interface']
class ILayers:
    def get_layers_instance_by_context(self, arg0: capsule) -> ILayersInstance:
        ...
    def get_layers_instance_by_name(self, arg0: str) -> ILayersInstance:
        ...
class ILayersInstance:
    def get_edit_mode(self) -> ...:
        ...
    def get_event_stream(self) -> carb.events._events.IEventStream:
        ...
    def get_last_error_string(self) -> str:
        ...
    def get_last_error_type(self) -> LayerErrorType:
        ...
    def set_edit_mode(self, arg0: ...) -> None:
        ...
class ILayersState:
    def get_all_outdated_layer_identifiers(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def get_dirty_layer_identifiers(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def get_layer_name(self, arg0: ILayersInstance, arg1: str) -> str:
        ...
    def get_layer_owner(self, arg0: ILayersInstance, arg1: str) -> str:
        ...
    def get_local_layer_identifiers(self, arg0: ILayersInstance, arg1: bool, arg2: bool, arg3: bool) -> carb.dictionary._dictionary.Item:
        ...
    def get_outdated_non_sublayer_identifiers(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def get_outdated_sublayer_identifiers(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def is_layer_globally_muted(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_locally_muted(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_locked(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_outdated(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_readonly_on_disk(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_savable(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_writable(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_muteness_global(self, arg0: ILayersInstance) -> bool:
        ...
    def reload_all_outdated_layers(self, arg0: ILayersInstance) -> None:
        ...
    def reload_outdated_non_sublayers(self, arg0: ILayersInstance) -> None:
        ...
    def reload_outdated_sublayers(self, arg0: ILayersInstance) -> None:
        ...
    def set_layer_lock_state(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> None:
        ...
    def set_layer_name(self, arg0: ILayersInstance, arg1: str, arg2: str) -> None:
        ...
    def set_muteness_scope(self, arg0: ILayersInstance, arg1: bool) -> None:
        ...
class IWorkflowAutoAuthoring:
    def get_default_layer(self, arg0: ILayersInstance) -> str:
        ...
    def is_auto_authoring_layer(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_enabled(self, arg0: ILayersInstance) -> bool:
        ...
    def set_default_layer(self, arg0: ILayersInstance, arg1: str) -> None:
        ...
class IWorkflowLiveSyncing:
    def create_live_session(self, arg0: ILayersInstance, arg1: str, arg2: str) -> LiveSessionHandle:
        ...
    def find_live_session_by_name(self, arg0: ILayersInstance, arg1: str, arg2: str) -> LiveSessionHandle:
        ...
    def get_current_live_session(self, arg0: ILayersInstance, arg1: str) -> LiveSessionHandle:
        ...
    def get_live_session_at_index(self, arg0: ILayersInstance, arg1: str, arg2: int) -> LiveSessionHandle:
        ...
    def get_live_session_base_layer_identifier(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_live_session_by_url(self, arg0: ILayersInstance, arg1: str) -> LiveSessionHandle:
        ...
    def get_live_session_channel_url(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_live_session_for_live_layer(self, arg0: ILayersInstance, arg1: str) -> LiveSessionHandle:
        ...
    def get_live_session_last_modified_time_ns(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> int:
        ...
    def get_live_session_name(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_live_session_owner(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_live_session_prim_paths(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> carb.dictionary._dictionary.Item:
        ...
    def get_live_session_root_identifier(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_live_session_url(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> str:
        ...
    def get_logged_in_user_id_for_layer(self, arg0: ILayersInstance, arg1: str) -> str:
        ...
    def get_logged_in_user_name_for_layer(self, arg0: ILayersInstance, arg1: str) -> str:
        ...
    def get_total_live_sessions(self, arg0: ILayersInstance, arg1: str) -> int:
        ...
    def is_layer_in_live_session(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_layer_in_prim_live_session(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_live_session_layer(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def is_prim_in_live_session(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: bool) -> bool:
        ...
    def is_stage_in_live_session(self, arg0: ILayersInstance) -> bool:
        ...
    def is_valid_live_session(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> bool:
        ...
    def join_live_session(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> bool:
        ...
    def join_live_session_by_url(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: bool) -> bool:
        ...
    def join_live_session_for_prim(self, arg0: ILayersInstance, arg1: LiveSessionHandle, arg2: str) -> bool:
        ...
    def merge_live_session_changes(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> bool:
        ...
    def merge_live_session_changes_to_specific_layer(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: bool, arg4: bool) -> bool:
        ...
    def open_stage_with_live_session(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: typing.Callable[[bool, str], None]) -> bool:
        ...
    def permission_to_merge_session_changes(self, arg0: ILayersInstance, arg1: LiveSessionHandle) -> bool:
        ...
    def stop_all_live_sessions(self, arg0: ILayersInstance) -> None:
        ...
    def stop_live_session(self, arg0: ILayersInstance, arg1: str) -> None:
        ...
    def stop_live_session_for_prim(self, arg0: ILayersInstance, arg1: str, arg2: str) -> None:
        ...
    def try_cancelling_live_session_join(self, arg0: ILayersInstance, arg1: str) -> LiveSessionHandle:
        ...
class IWorkflowSpecsLinking:
    def get_all_spec_links(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def get_spec_layer_links(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> carb.dictionary._dictionary.Item:
        ...
    def get_spec_links_for_layer(self, arg0: ILayersInstance, arg1: str) -> carb.dictionary._dictionary.Item:
        ...
    def is_enabled(self, arg0: ILayersInstance) -> bool:
        ...
    def is_spec_linked(self, arg0: ILayersInstance, arg1: str, arg2: str) -> bool:
        ...
    def link_spec(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: bool) -> carb.dictionary._dictionary.Item:
        ...
    def unlink_all_specs(self, arg0: ILayersInstance) -> None:
        ...
    def unlink_spec(self, arg0: ILayersInstance, arg1: str, arg2: str, arg3: bool) -> carb.dictionary._dictionary.Item:
        ...
    def unlink_spec_from_all_layers(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> carb.dictionary._dictionary.Item:
        ...
    def unlink_specs_to_layer(self, arg0: ILayersInstance, arg1: str) -> carb.dictionary._dictionary.Item:
        ...
class IWorkflowSpecsLocking:
    def get_all_locked_specs(self, arg0: ILayersInstance) -> carb.dictionary._dictionary.Item:
        ...
    def is_spec_locked(self, arg0: ILayersInstance, arg1: str) -> bool:
        ...
    def lock_spec(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> carb.dictionary._dictionary.Item:
        ...
    def unlock_all_specs(self, arg0: ILayersInstance) -> None:
        ...
    def unlock_spec(self, arg0: ILayersInstance, arg1: str, arg2: bool) -> carb.dictionary._dictionary.Item:
        ...
class LayerEditMode:
    """
    Layer edit mode.
    
    Members:
    
      NORMAL : Normal authoring mode.
    
      AUTO_AUTHORING : Auto authoring mode.
    
      SPECS_LINKING : Specs Linking mode.
    """
    AUTO_AUTHORING: typing.ClassVar[LayerEditMode]  # value = <LayerEditMode.AUTO_AUTHORING: 1>
    NORMAL: typing.ClassVar[LayerEditMode]  # value = <LayerEditMode.NORMAL: 0>
    SPECS_LINKING: typing.ClassVar[LayerEditMode]  # value = <LayerEditMode.SPECS_LINKING: 2>
    __members__: typing.ClassVar[dict[str, LayerEditMode]]  # value = {'NORMAL': <LayerEditMode.NORMAL: 0>, 'AUTO_AUTHORING': <LayerEditMode.AUTO_AUTHORING: 1>, 'SPECS_LINKING': <LayerEditMode.SPECS_LINKING: 2>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class LayerErrorType:
    """
    Layer error type.
    
    Members:
    
      SUCCESS : Success.
    
      NOT_FOUND : Object (layer, file, or session, etc) is not found.
    
      ALREADY_EXISTS : Object exists already.
    
      READ_ONLY : File, layer or folder is read-only.
    
      INVALID_STAGE : No valid stage opened.
    
      INVALID_PARAM : Invalid parameters passed into function.
    
      LIVE_SESSION_NOT_JOINED : Live Session is not joined.
    
      LIVE_SESSOIN_INVALID : Live Session is invalid.
    
      LIVE_SESSION_JOINED_ALREADY : Live Session is joined already.
    
      LIVE_SESSION_NO_MERGE_PERMISSION : Live Session cannot be merged due to permission.
    
      LIVE_SESSION_VERSION_MISMATCH : Live Session verson does not match.
    
      LIVE_SESSION_BASE_LAYER_MISMATCH : Base layer of Live Session does not match.
    
      LIVE_SESSION_NOT_SUPPORTED : Live Session cannot be created under the domain.
    
      UNKNOWN : Unknown error.
    """
    ALREADY_EXISTS: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.ALREADY_EXISTS: 3>
    INVALID_PARAM: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.INVALID_PARAM: 5>
    INVALID_STAGE: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.INVALID_STAGE: 4>
    LIVE_SESSION_BASE_LAYER_MISMATCH: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_BASE_LAYER_MISMATCH: 8>
    LIVE_SESSION_JOINED_ALREADY: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_JOINED_ALREADY: 9>
    LIVE_SESSION_NOT_JOINED: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_NOT_JOINED: 12>
    LIVE_SESSION_NOT_SUPPORTED: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_NOT_SUPPORTED: 11>
    LIVE_SESSION_NO_MERGE_PERMISSION: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_NO_MERGE_PERMISSION: 10>
    LIVE_SESSION_VERSION_MISMATCH: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSION_VERSION_MISMATCH: 7>
    LIVE_SESSOIN_INVALID: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.LIVE_SESSOIN_INVALID: 6>
    NOT_FOUND: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.NOT_FOUND: 2>
    READ_ONLY: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.READ_ONLY: 1>
    SUCCESS: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.SUCCESS: 0>
    UNKNOWN: typing.ClassVar[LayerErrorType]  # value = <LayerErrorType.UNKNOWN: 13>
    __members__: typing.ClassVar[dict[str, LayerErrorType]]  # value = {'SUCCESS': <LayerErrorType.SUCCESS: 0>, 'NOT_FOUND': <LayerErrorType.NOT_FOUND: 2>, 'ALREADY_EXISTS': <LayerErrorType.ALREADY_EXISTS: 3>, 'READ_ONLY': <LayerErrorType.READ_ONLY: 1>, 'INVALID_STAGE': <LayerErrorType.INVALID_STAGE: 4>, 'INVALID_PARAM': <LayerErrorType.INVALID_PARAM: 5>, 'LIVE_SESSION_NOT_JOINED': <LayerErrorType.LIVE_SESSION_NOT_JOINED: 12>, 'LIVE_SESSOIN_INVALID': <LayerErrorType.LIVE_SESSOIN_INVALID: 6>, 'LIVE_SESSION_JOINED_ALREADY': <LayerErrorType.LIVE_SESSION_JOINED_ALREADY: 9>, 'LIVE_SESSION_NO_MERGE_PERMISSION': <LayerErrorType.LIVE_SESSION_NO_MERGE_PERMISSION: 10>, 'LIVE_SESSION_VERSION_MISMATCH': <LayerErrorType.LIVE_SESSION_VERSION_MISMATCH: 7>, 'LIVE_SESSION_BASE_LAYER_MISMATCH': <LayerErrorType.LIVE_SESSION_BASE_LAYER_MISMATCH: 8>, 'LIVE_SESSION_NOT_SUPPORTED': <LayerErrorType.LIVE_SESSION_NOT_SUPPORTED: 11>, 'UNKNOWN': <LayerErrorType.UNKNOWN: 13>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class LayerEventType:
    """
    Layer event types.
    
    Members:
    
      INFO_CHANGED : Layer metadata changed.
    
      DIRTY_STATE_CHANGED : Layers' dirty state changed.
    
      LOCK_STATE_CHANGED : Layers' lock state changed.
    
      MUTENESS_SCOPE_CHANGED : Layers' mute scope changed.
    
      MUTENESS_STATE_CHANGED : Layers' mute state changed.
    
      OUTDATE_STATE_CHANGED : Layers' outdate state changed.
    
      PRIM_SPECS_CHANGED : Layers' prim specs changed.
    
      SUBLAYERS_CHANGED : Layers' sublayer list changed.
    
      EDIT_TARGET_CHANGED : Stage's edit target changed.
    
      SPECS_LOCKING_CHANGED : Stage's locking specs changed.
    
      SPECS_LINKING_CHANGED : Stage's linking specs changed.
    
      EDIT_MODE_CHANGED : Stage's edit mode changed.
    
      DEFAULT_LAYER_CHANGED : Stage's default layer changed when it's in Auto Authoring mode.
    
      LIVE_SESSION_STATE_CHANGED : Layers' Live Session state changed.
    
      LIVE_SESSION_JOINING : Layers are joining Live Session.
    
      LIVE_SESSION_LIST_CHANGED : Layers' Live Session list changed.
    
      LIVE_SESSION_USER_JOINED : New User joined the Live Session.
    
      LIVE_SESSION_USER_LEFT : New User left the Live Session.
    
      LIVE_SESSION_MERGE_STARTED : Merging Live Session started.
    
      LIVE_SESSION_MERGE_ENDED : Merging Live Session ended.
    
      USED_LAYERS_CHANGED : Stage's used layers changed.
    
      LAYER_FILE_PERMISSION_CHANGED : Layer's file permisison changed on file system.
    """
    DEFAULT_LAYER_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.DEFAULT_LAYER_CHANGED: 12>
    DIRTY_STATE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.DIRTY_STATE_CHANGED: 4>
    EDIT_MODE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.EDIT_MODE_CHANGED: 11>
    EDIT_TARGET_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.EDIT_TARGET_CHANGED: 10>
    INFO_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.INFO_CHANGED: 0>
    LAYER_FILE_PERMISSION_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LAYER_FILE_PERMISSION_CHANGED: 21>
    LIVE_SESSION_JOINING: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_JOINING: 20>
    LIVE_SESSION_LIST_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_LIST_CHANGED: 14>
    LIVE_SESSION_MERGE_ENDED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_MERGE_ENDED: 18>
    LIVE_SESSION_MERGE_STARTED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_MERGE_STARTED: 17>
    LIVE_SESSION_STATE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_STATE_CHANGED: 13>
    LIVE_SESSION_USER_JOINED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_USER_JOINED: 15>
    LIVE_SESSION_USER_LEFT: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LIVE_SESSION_USER_LEFT: 16>
    LOCK_STATE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.LOCK_STATE_CHANGED: 3>
    MUTENESS_SCOPE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.MUTENESS_SCOPE_CHANGED: 1>
    MUTENESS_STATE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.MUTENESS_STATE_CHANGED: 2>
    OUTDATE_STATE_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.OUTDATE_STATE_CHANGED: 5>
    PRIM_SPECS_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.PRIM_SPECS_CHANGED: 6>
    SPECS_LINKING_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.SPECS_LINKING_CHANGED: 9>
    SPECS_LOCKING_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.SPECS_LOCKING_CHANGED: 8>
    SUBLAYERS_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.SUBLAYERS_CHANGED: 7>
    USED_LAYERS_CHANGED: typing.ClassVar[LayerEventType]  # value = <LayerEventType.USED_LAYERS_CHANGED: 19>
    __members__: typing.ClassVar[dict[str, LayerEventType]]  # value = {'INFO_CHANGED': <LayerEventType.INFO_CHANGED: 0>, 'DIRTY_STATE_CHANGED': <LayerEventType.DIRTY_STATE_CHANGED: 4>, 'LOCK_STATE_CHANGED': <LayerEventType.LOCK_STATE_CHANGED: 3>, 'MUTENESS_SCOPE_CHANGED': <LayerEventType.MUTENESS_SCOPE_CHANGED: 1>, 'MUTENESS_STATE_CHANGED': <LayerEventType.MUTENESS_STATE_CHANGED: 2>, 'OUTDATE_STATE_CHANGED': <LayerEventType.OUTDATE_STATE_CHANGED: 5>, 'PRIM_SPECS_CHANGED': <LayerEventType.PRIM_SPECS_CHANGED: 6>, 'SUBLAYERS_CHANGED': <LayerEventType.SUBLAYERS_CHANGED: 7>, 'EDIT_TARGET_CHANGED': <LayerEventType.EDIT_TARGET_CHANGED: 10>, 'SPECS_LOCKING_CHANGED': <LayerEventType.SPECS_LOCKING_CHANGED: 8>, 'SPECS_LINKING_CHANGED': <LayerEventType.SPECS_LINKING_CHANGED: 9>, 'EDIT_MODE_CHANGED': <LayerEventType.EDIT_MODE_CHANGED: 11>, 'DEFAULT_LAYER_CHANGED': <LayerEventType.DEFAULT_LAYER_CHANGED: 12>, 'LIVE_SESSION_STATE_CHANGED': <LayerEventType.LIVE_SESSION_STATE_CHANGED: 13>, 'LIVE_SESSION_JOINING': <LayerEventType.LIVE_SESSION_JOINING: 20>, 'LIVE_SESSION_LIST_CHANGED': <LayerEventType.LIVE_SESSION_LIST_CHANGED: 14>, 'LIVE_SESSION_USER_JOINED': <LayerEventType.LIVE_SESSION_USER_JOINED: 15>, 'LIVE_SESSION_USER_LEFT': <LayerEventType.LIVE_SESSION_USER_LEFT: 16>, 'LIVE_SESSION_MERGE_STARTED': <LayerEventType.LIVE_SESSION_MERGE_STARTED: 17>, 'LIVE_SESSION_MERGE_ENDED': <LayerEventType.LIVE_SESSION_MERGE_ENDED: 18>, 'USED_LAYERS_CHANGED': <LayerEventType.USED_LAYERS_CHANGED: 19>, 'LAYER_FILE_PERMISSION_CHANGED': <LayerEventType.LAYER_FILE_PERMISSION_CHANGED: 21>}
    def __eq__(self, other: typing.Any) -> bool:
        ...
    def __getstate__(self) -> int:
        ...
    def __hash__(self) -> int:
        ...
    def __index__(self) -> int:
        ...
    def __init__(self, value: int) -> None:
        ...
    def __int__(self) -> int:
        ...
    def __ne__(self, other: typing.Any) -> bool:
        ...
    def __repr__(self) -> str:
        ...
    def __setstate__(self, state: int) -> None:
        ...
    def __str__(self) -> str:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def value(self) -> int:
        ...
class LiveSessionHandle:
    pass
def acquire_auto_authoring_interface(plugin_name: str = None, library_path: str = None) -> IWorkflowAutoAuthoring:
    ...
def acquire_layers_interface(plugin_name: str = None, library_path: str = None) -> ILayers:
    ...
def acquire_layers_state_interface(plugin_name: str = None, library_path: str = None) -> ILayersState:
    ...
def acquire_live_syncing_interface(plugin_name: str = None, library_path: str = None) -> IWorkflowLiveSyncing:
    ...
def acquire_specs_linking_interface(plugin_name: str = None, library_path: str = None) -> IWorkflowSpecsLinking:
    ...
def acquire_specs_locking_interface(plugin_name: str = None, library_path: str = None) -> IWorkflowSpecsLocking:
    ...
def release_auto_authoring_interface(arg0: IWorkflowAutoAuthoring) -> None:
    ...
def release_layers_interface(arg0: ILayers) -> None:
    ...
def release_layers_state_interface(arg0: ILayersState) -> None:
    ...
def release_live_syncing_interface(arg0: IWorkflowLiveSyncing) -> None:
    ...
def release_specs_linking_interface(arg0: IWorkflowSpecsLinking) -> None:
    ...
def release_specs_locking_interface(arg0: IWorkflowSpecsLocking) -> None:
    ...
