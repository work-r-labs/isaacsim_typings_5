from __future__ import annotations
import carb as carb
import omni as omni
from omni.kit.property.adapter.core.scripts.core_adapter import AttributeAdapter
from omni.kit.property.adapter.core.scripts.core_adapter import PrimAdapter
from omni.kit.property.adapter.core.scripts.core_adapter import PropertyType
from omni.kit.property.adapter.core.scripts.core_adapter import StageAdapter
from omni.kit.property.adapter.fabric.scripts.change_tracker_wrapper import RtChangeTrackerWrapper
from omni.kit.property.adapter.fabric.scripts.convert import convert_usdrt_to_usd
import pxr.Sdf
from pxr import Sdf
from pxr import Usd
import pxr.Usd
from pxr import UsdUtils
import typing
from typing import Any
import usdrt as usdrt
__all__: list[str] = ['Any', 'AttributeAdapter', 'FabricAttributeAdapter', 'FabricPrimAdapter', 'FabricStageAdapter', 'PrimAdapter', 'PropertyType', 'READ_PRIORITY_SETTINGS', 'RtChangeTrackerWrapper', 'Sdf', 'StageAdapter', 'UNSUPPORT_TYPES', 'Usd', 'UsdUtils', 'WRITE_PRIORITY_SETTINGS', 'carb', 'convert_usdrt_to_usd', 'omni', 'usdrt']
class FabricAttributeAdapter(omni.kit.property.adapter.core.scripts.core_adapter.AttributeAdapter):
    """
    
        Adapter to provide usdrt attributes with a unified interface so
        that Fabric property can work with UsdProperty code.
        
    """
    __abstractmethods__: typing.ClassVar[frozenset]  # value = frozenset()
    _abc_impl: typing.ClassVar[_abc._abc_data]  # value = <_abc._abc_data object>
    def GetAllMetadata(self):
        ...
    def GetDisplayGroup(self):
        ...
    def GetMetadata(self, key = None):
        ...
    def GetNumTimeSamples(self):
        ...
    def GetPrim(self):
        ...
    def GetPropertyStack(self, *args, **kwargs) -> list['PropertySpecAdapter']:
        ...
    def GetPropertyType(self):
        ...
    def IsHidden(self):
        ...
    def __getattr__(self, attr):
        ...
    def __init__(self, attribute: usdrt.Usd._Usd.Attribute):
        ...
    def unsupport(self, *args, **kwargs):
        ...
    @property
    def attribute(self):
        ...
class FabricPrimAdapter(omni.kit.property.adapter.core.scripts.core_adapter.PrimAdapter):
    """
    
        Adapter to provide usdrt attributes with a unified interface so
        that Fabric property can work with UsdProperty code.
        
    """
    __abstractmethods__: typing.ClassVar[frozenset]  # value = frozenset()
    _abc_impl: typing.ClassVar[_abc._abc_data]  # value = <_abc._abc_data object>
    def GetAttribute(self, path: str) -> FabricAttributeAdapter:
        ...
    def GetPrimDefinition(self):
        ...
    def GetProperties(self) -> FabricAttributeAdapter:
        ...
    def GetPropertyOrder(self):
        ...
    def IsInstanceProxy(self):
        ...
    def __getattr__(self, attr):
        ...
    def __init__(self, prim: usdrt.Usd._Usd.Prim):
        ...
    def unsupport(self, *args, **kwargs):
        ...
    @property
    def prim(self):
        ...
class FabricStageAdapter(omni.kit.property.adapter.core.scripts.core_adapter.StageAdapter):
    """
    
        Adapter to provide usdrt attributes with a unified interface so
        that Fabric property can work with UsdProperty code.
        
    """
    __abstractmethods__: typing.ClassVar[frozenset]  # value = frozenset()
    _abc_impl: typing.ClassVar[_abc._abc_data]  # value = <_abc._abc_data object>
    def CreateChangeTracker(self, attr_names: list[str], prim_paths: list[pxr.Sdf.Path], callback: typing.Callable[[omni.kit.property.adapter.fabric.scripts.change_tracker_wrapper.RtChangeTrackerWrapper.Notice, pxr.Usd.Stage], NoneType]) -> omni.kit.property.adapter.fabric.scripts.change_tracker_wrapper.RtChangeTrackerWrapper:
        ...
    def GetAttributeAtPath(self, path: pxr.Sdf.Path) -> FabricAttributeAdapter:
        ...
    def GetChangeAttributeArgs(self, path: pxr.Sdf.Path, new_value: typing.Any, old_value: typing.Any):
        ...
    def GetLayerStack(self):
        ...
    def GetObjectAtPath(self, path: pxr.Sdf.Path):
        ...
    def GetPathResolverContext(self):
        ...
    def GetPrimAtPath(self, path: pxr.Sdf.Path) -> FabricPrimAdapter:
        ...
    def GetPropertyAtPath(self, path: pxr.Sdf.Path) -> FabricAttributeAdapter:
        ...
    def GetRootLayer(self):
        ...
    def GetTimeCodesPerSecond(self):
        ...
    def __getattr__(self, attr):
        ...
    def __init__(self, stage: pxr.Usd.Stage):
        ...
    def convert_data(self, value, dst_adapter_name: str):
        ...
    def get_frame_time_code(self, current_time) -> usdrt.Usd._Usd.TimeCode:
        ...
    def get_notice_paths(self, stage, notice):
        ...
    def resolve_path_array(self, path, resolved_path: str, path_list, index):
        ...
    def unsupport(self, *args, **kwargs):
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def priority_read(self) -> int:
        ...
    @property
    def priority_write(self) -> int:
        ...
    @property
    def stage(self):
        ...
    @property
    def usd_stage(self):
        ...
READ_PRIORITY_SETTINGS: str = '/exts/omni.kit.property.adapter.fabric/priority_read'
UNSUPPORT_TYPES: list = ['unknown', 'double (timecode)', 'double16 (frame)', 'double4 (matrix)']
WRITE_PRIORITY_SETTINGS: str = '/exts/omni.kit.property.adapter.fabric/priority_write'
