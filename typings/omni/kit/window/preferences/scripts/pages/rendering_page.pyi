from __future__ import annotations
import carb as carb
import omni as omni
from omni.kit.widget.settings.settings_widget import SettingType
from omni.kit.window.preferences.scripts.preference_builder import PreferenceBuilder
from omni import ui
from typing import Any
__all__: list[str] = ['Any', 'PERSISTENT_SETTINGS_PREFIX', 'PreferenceBuilder', 'RenderingPreferences', 'SettingType', 'carb', 'omni', 'ui']
class RenderingPreferences(omni.kit.window.preferences.scripts.preference_builder.PreferenceBuilder):
    @staticmethod
    def post_notification(message: str, info: bool = False, duration: int = 3):
        ...
    def _RenderingPreferences__check_extension_loaded(self, ext_id: str):
        ...
    def __init__(self):
        ...
    def _on_fabric_delegate_changed(self, value: str, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _on_geometry_streaming_changed(self, value: bool, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _on_material_distilling_changed(self, value: bool, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _on_multigpu_changed(self, model, item):
        ...
    def _on_opacity_micromap_changed(self, value: bool, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _on_renderers_changed(self, value: bool, event_type: carb.settings._settings.ChangeEventType):
        ...
    def build(self):
        ...
PERSISTENT_SETTINGS_PREFIX: str = '/persistent'
