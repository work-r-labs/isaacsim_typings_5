import OmniScriptingSchema as OmniScriptingSchema
from __future__ import annotations
import asyncio as asyncio
import carb as carb
import omni as omni
from omni.kit.scripting.scripts.loader import omni_finder_loader
from omni.kit.scripting.scripts.loader.omni_finder_loader import OmniFinder
from omni import ui
import os as os
from pxr import Sdf
import re as re
import sys as sys
import traceback as traceback
from urllib.parse import urlparse
__all__: list[str] = ['OmniFinder', 'OmniScriptingSchema', 'Prompt', 'Sdf', 'asyncio', 'carb', 'ensure_absolute_path', 'import_dialog', 'is_path_relative', 'omni', 'omni_finder_loader', 'open_script_file', 'os', 're', 'refresh_property_window', 'show_security_popup', 'sys', 'traceback', 'traceback_format_exception', 'ui', 'urlparse']
class Prompt:
    def __del__(self):
        ...
    def __enter__(self):
        ...
    def __exit__(self, type, value, trace):
        ...
    def __init__(self, title, text, ok_button_text = 'OK', cancel_button_text = None, middle_button_text = None, ok_button_fn = None, cancel_button_fn = None, middle_button_fn = None, modal = False):
        ...
    def _build_ui(self):
        ...
    def _on_cancel_button_fn(self):
        ...
    def _on_middle_button_fn(self):
        ...
    def _on_ok_button_fn(self):
        ...
    def hide(self):
        ...
    def is_visible(self):
        ...
    def set_cancel_fn(self, on_cancel_button_clicked):
        ...
    def set_confirm_fn(self, on_ok_button_clicked):
        ...
    def set_middle_button_fn(self, on_middle_button_clicked):
        ...
    def set_text(self, text):
        ...
    def show(self):
        ...
def ensure_absolute_path(path: str) -> str:
    ...
def is_path_relative(path: str) -> bool:
    """
    Takes in a local or Omniverse path and determines if it is relative
    
        Args:
            path: the path to be determined if it is relative
        
    """
def open_script_file(path):
    ...
def refresh_property_window():
    ...
def show_security_popup(future):
    ...
def traceback_format_exception(callback_fn = None):
    ...
_traceback_filename_regex: re.Pattern  # value = re.compile(' *File \\"(.*)\\"')
import_dialog = None
