from __future__ import annotations
import asyncio as asyncio
import carb as carb
import math as math
import omni as omni
from omni.kit.viewport.menubar.core.delegate.abstract_widget_menu_delegate import AbstractWidgetMenuDelegate
from omni.kit.viewport.menubar.settings.menu_item.custom_resolution.save_window import SaveWindow
from omni import ui
import weakref as weakref
__all__: list[str] = ['AbstractWidgetMenuDelegate', 'CustomResolutionDelegate', 'RatioItem', 'RatioModel', 'SETTING_CUSTOM_RESOLUTION_LIST', 'SETTING_MIN_RESOLUTION', 'SaveWindow', 'asyncio', 'carb', 'math', 'omni', 'ui', 'weakref']
class CustomResolutionDelegate(omni.kit.viewport.menubar.core.delegate.abstract_widget_menu_delegate.AbstractWidgetMenuDelegate):
    """
    
        Delegate to edit/save custom resolution.
        
    """
    resolution: typing.Tuple[int, int]
    def _CustomResolutionDelegate__on_begin_edit(self):
        ...
    def _CustomResolutionDelegate__on_height_changed(self, model):
        ...
    def _CustomResolutionDelegate__on_height_end_edit(self):
        ...
    def _CustomResolutionDelegate__on_link_clicked(self):
        ...
    def _CustomResolutionDelegate__on_ratio_changed(self, ratio: float):
        ...
    def _CustomResolutionDelegate__on_save_resolution(self, new_name: str, resolution: typing.Tuple[int, int]) -> bool:
        ...
    def _CustomResolutionDelegate__on_width_changed(self, model):
        ...
    def _CustomResolutionDelegate__on_width_end_edit(self):
        ...
    def _CustomResolutionDelegate__post_resolution_warning(self):
        ...
    def _CustomResolutionDelegate__save(self):
        ...
    def _CustomResolutionDelegate__set_render_resolution(self, resolution: typing.Tuple[int, int]):
        ...
    def _CustomResolutionDelegate__subscribe_ratio_change(self, enable: bool = True) -> bool:
        ...
    def _CustomResolutionDelegate__update_save_image_state(self):
        ...
    def __init__(self, resolution_model, resolution_setter):
        ...
    def build_widget(self, item: omni.ui._ui.MenuHelper):
        ...
    def destroy(self):
        ...
class RatioItem(omni.ui._ui.AbstractItem):
    def __init__(self, text: str, value: float) -> None:
        ...
class RatioModel(omni.ui._ui.AbstractItemModel):
    """
    
        The model used for ratio combobox
        
    """
    ratio: float
    def _RatioModel__on_index_changed(self):
        ...
    def __init__(self):
        ...
    def destroy(self):
        ...
    def get_item_children(self, item) -> typing.List[omni.kit.viewport.menubar.settings.menu_item.custom_resolution.custom_resolution_delegate.RatioItem]:
        ...
    def get_item_value_model(self, item, column_id):
        ...
    def subscribe_ratio_changed_fn(self, on_ratio_changed_fn: typing.Callable[[float], NoneType]):
        ...
SETTING_CUSTOM_RESOLUTION_LIST: str = '/persistent/app/renderer/resolution/custom/list'
SETTING_MIN_RESOLUTION: str = '/exts/omni.kit.viewport.menubar.settings/min_resolution'
