from __future__ import annotations
import carb as carb
from carb.eventdispatcher._eventdispatcher import Event
from carb.eventdispatcher import get_eventdispatcher
import omni as omni
from omni.gpu_foundation_factory._gpu_foundation_factory import get_memory_info
from omni.hydra.engine.stats._stats import get_device_info as _get_device_info
from omni.kit.viewport.window.events.delegate import _limit_camera_velocity
from omni import ui
import time as time
import traceback as traceback
import typing
import weakref as weakref
__all__: list = ['ViewportStatsLayer']
class ViewportFPS(ViewportStatistic):
    def __init__(self, *args, **kwargs):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
class ViewportMemoryStat(ViewportStatistic):
    @staticmethod
    def _ViewportMemoryStat__check_bool_or_list(obj: typing.Union[bool, typing.List[bool]], index: int):
        ...
    def _ViewportMemoryStat__format_memory(self, update_info: dict, total: int | None = None, available: int | None = None, used: int | None = None, label: str | None = None):
        ...
    def _ViewportMemoryStat__update_device_memory(self, update_info: dict):
        ...
    def _ViewportMemoryStat__update_host_memory(self, update_info: dict):
        ...
    def _ViewportMemoryStat__update_process_memory(self, update_info: dict):
        ...
    def __init__(self, mem_type: str | None = None, *args, **kwargs):
        ...
    def set_text(self, txt: str, index: int):
        ...
    def skip_update(self, update_info: dict):
        ...
class ViewportMessage(ViewportStatisticFading):
    class _ToastMessage(_HudMessageTracker):
        """
        Store a message to fade with _HudMessageTracker
        """
        def __init__(self, message: str, *args, **kwargs):
            ...
        @property
        def message(self):
            ...
    def __init__(self, *args, **kwargs):
        ...
    def add_message(self, message: str, message_id: str):
        ...
    def destroy(self):
        ...
    def remove_message(self, message: str, message_id: str):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
class ViewportProgress(ViewportStatistic):
    def __init__(self, *args, **kwargs):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
class ViewportResolution(ViewportStatistic):
    def __init__(self, *args, **kwargs):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
class ViewportSpeed(ViewportStatisticFading):
    _ViewportSpeed__CAMERA_MANIP_MODE: typing.ClassVar[str] = '/exts/omni.kit.manipulator.camera/viewportMode'
    _ViewportSpeed__CAM_VELOCITY: typing.ClassVar[str] = '/persistent/app/viewport/camMoveVelocity'
    _ViewportSpeed__COLLAPSE_CAM_SPEED: typing.ClassVar[str] = '/persistent/exts/omni.kit.viewport.window/cameraSpeedMessage/collapsed'
    _ViewportSpeed__FLY_VIEW_LOCK: typing.ClassVar[str] = '/persistent/exts/omni.kit.manipulator.camera/flyViewLock'
    _ViewportSpeed__FLY_VIEW_LOCK_STAT: typing.ClassVar[str] = '/persistent/exts/omni.kit.viewport.window/cameraSpeedMessage/showFlyViewLock'
    def _ViewportSpeed__add_mouse_item(self, label: str, tooltip: str, key_label: typing.Optional[str] = None):
        ...
    def _ViewportSpeed__build_cam_speed_info(self, *args, **kwargs):
        ...
    def _ViewportSpeed__build_root_ui(self, collapsed: typing.Optional[bool] = None):
        ...
    def _ViewportSpeed__cam_manip_mode_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportSpeed__cam_vel_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportSpeed__collapse_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportSpeed__get_camera_speed_value(self):
        ...
    def _ViewportSpeed__get_lock_style_name(self):
        ...
    def _ViewportSpeed__mouse_hovered(self, hovered: bool, *args):
        ...
    def _ViewportSpeed__remove_camera_subs(self, settings):
        ...
    def _ViewportSpeed__show_fly_view_lock(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportSpeed__toggle_cam_speed_info(self):
        ...
    def _ViewportSpeed__toggle_fly_view_lock(self):
        ...
    def _ViewportSpeed__toggled_fly_view_lock(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportSpeed__track_time(self):
        ...
    def __init__(self, viewport_api, *args, **kwargs):
        ...
    def _create_ui(self, alignment: omni.ui._ui.Alignment):
        ...
    def _visibility_change(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def destroy(self):
        ...
    def update(self, update_info: dict):
        ...
    @property
    def empty(self) -> bool:
        ...
class ViewportStatistic:
    def __del__(self):
        ...
    def __init__(self, stat_name: str, setting_key: str = None, parent = None, alignment: omni.ui._ui.Alignment = ..., viewport_api = None):
        ...
    def _create_label(self, text: str = '', alignment: typing.Optional[omni.ui._ui.Alignment] = None):
        ...
    def _create_ui(self, alignment: omni.ui._ui.Alignment):
        ...
    def _destroy_labels(self):
        ...
    def _visibility_change(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def destroy(self):
        ...
    def set_text(self, txt: str, index: int):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
    @property
    def alignment(self) -> omni.ui._ui.Alignment:
        ...
    @property
    def categories(self):
        ...
    @property
    def container(self):
        ...
    @property
    def empty(self) -> bool:
        ...
    @property
    def name(self):
        ...
    @property
    def visible(self) -> bool:
        ...
    @visible.setter
    def visible(self, value):
        ...
class ViewportStatisticFading(ViewportStatistic):
    def __init__(self, anim_key: str, parent = None, *args, **kwargs):
        ...
    def _begin_animation(self):
        ...
    def _end_animation(self, alpha: float = 0):
        ...
    def _skip_update(self, update_info: dict, check_empty: typing.Optional[typing.Callable] = None):
        ...
    def _update_alpha(self, update_info: dict, accumulate_alpha: typing.Callable):
        ...
    def destroy(self):
        ...
    @property
    def message_time(self) -> _HudMessageTime:
        ...
class ViewportStatsGroup:
    visible = ...
    def _ViewportStatsGroup__set_alpha(self, alpha: float, background_alpha: float, background_alpha_changed: bool):
        ...
    def __del__(self):
        ...
    def __init__(self, factories, name: str, alignment: omni.ui._ui.Alignment, viewport_api):
        ...
    def _update_stats(self, update_info: dict):
        ...
    def destroy(self):
        ...
    @property
    def categories(self):
        ...
    @property
    def layers(self):
        ...
    @property
    def name(self):
        ...
class ViewportStatsLayer:
    _LEGACY_FORCE_FPS_OFF: typing.ClassVar[str] = '/app/viewport/forceHideFps'
    _LEGACY_LAYER_MENU_ON: typing.ClassVar[str] = '/app/viewport/showLayerMenu'
    visible = ...
    @staticmethod
    def _ViewportStatsLayer__get_transient_visibility(settings):
        ...
    def _ViewportStatsLayer__build_stats_hud(self, viewport_api):
        ...
    def _ViewportStatsLayer__destroy_all_stats(self, value = None):
        ...
    def _ViewportStatsLayer__legacy_transient_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportStatsLayer__make_update_info(self, viewport_api):
        ...
    def _ViewportStatsLayer__set_stats_enabled(self, enabled: bool):
        ...
    def _ViewportStatsLayer__stats_visiblity_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def _ViewportStatsLayer__update_stats(self, viewport_api):
        ...
    def __init__(self, desc: dict):
        ...
    def destroy(self):
        ...
    @property
    def categories(self):
        ...
    @property
    def layers(self):
        ...
    @property
    def name(self):
        ...
class ViewportStreamingStatus(ViewportStatistic):
    def __init__(self, *args, **kwargs):
        ...
    def _on_msg_bus_payload(self, event: carb.eventdispatcher._eventdispatcher.Event):
        ...
    def getKeySafe(self, dictionary, *args):
        ...
    def skip_update(self, update_info: dict):
        ...
    def update_stats(self, update_info: dict):
        ...
class _HudMessageTime:
    def _HudMessageTime__init(self, key: str):
        ...
    def __del__(self):
        ...
    def __init__(self, key: str):
        ...
    def destroy(self):
        ...
    @property
    def message_fade_in(self) -> float:
        ...
    @property
    def message_fade_out(self) -> float:
        ...
    @property
    def message_time(self) -> float:
        ...
    @property
    def total_up_time(self):
        ...
class _HudMessageTracker:
    """
    Calculate alpha for _HudMessageTime acounting for possibility of reversing direction mid-fade
    """
    def __init__(self, prev_tckr: typing.Optional[ForwardRef('_HudMessageTracker')] = None, message_time: typing.Optional[omni.kit.viewport.window.stats._HudMessageTime] = None):
        ...
    def update(self, message_time: _HudMessageTime, elapsed_time: float):
        ...
def _get_background_alpha(settings):
    ...
def _human_readable_size(size: int, binary: bool = True, decimal_places: int = 1):
    ...
def _resolve_hud_visibility(viewport_api, setting_key: str, isettings: carb.settings._settings.ISettings, dflt_value: bool = True):
    ...
CAM_SPEED_MESSAGE_KEY: str = '/exts/omni.kit.viewport.window/cameraSpeedMessage'
HUD_MEM_TYPES_KEY: str = '/exts/omni.kit.viewport.window/hud/memoryTypes'
IRAY_MAX_SAMPLES: str = '/rtx/iray/progressive_rendering_max_samples'
LOW_MEMORY_SETTING_PATH: str = '/persistent/app/viewport/memory/lowFraction'
MEMORY_CHECK_FREQUENCY: str = '/app/viewport/memory/queryFrequency'
RTX_ACCUMULATED_LIMIT: str = '/rtx/raytracing/accumulationLimit'
RTX_ACCUMULATION_ENABLED: str = '/rtx/raytracing/enableAccumulation'
RTX_PT_TOTAL_SPP: str = '/rtx/pathtracing/totalSpp'
RTX_SPP: str = '/rtx/pathtracing/spp'
RTX_STREAMING_STATUS_EVENT: int = 1527542380305352872
RTX_STREAMING_STATUS_GLOBAL_EVENT: str = 'omni.rtx.StreamingStatus'
TOAST_MESSAGE_KEY: str = '/app/viewport/toastMessage'
fl: omni.ui.constant_utils.FloatShade  # value = <omni.ui.constant_utils.FloatShade object>
