from __future__ import annotations
import carb as carb
import omni as omni
from omni.kit.viewport.window.dragdrop.scene_drop_delegate import SceneDropDelegate
import pxr.Gf
from pxr import Gf
import pxr.Sdf
from pxr import Sdf
from pxr import Usd
import pxr.Usd
from pxr import UsdShade
__all__: list = ['UsdPrimDropDelegate', 'UsdShadeDropDelegate']
class UsdPrimDropDelegate(omni.kit.viewport.window.dragdrop.scene_drop_delegate.SceneDropDelegate):
    def __init__(self, preview_setting: str = None, **kwargs):
        ...
    def accepted(self, drop_data: dict):
        ...
    def add_drop_marker(self, drop_data: dict, world_space_pos: pxr.Gf.Vec3d):
        ...
    def collect_child_paths(self, prim: pxr.Usd.Prim, filter_fn: typing.Callable):
        ...
    def dropped(self, drop_data: dict):
        ...
    def handle_prim_drop(self, stage: pxr.Usd.Stage, dropped_prim: pxr.Usd.Prim, dropped_onto: pxr.Usd.Prim, dropped_onto_model: pxr.Usd.Prim):
        ...
    def reset_state(self):
        ...
    @property
    def dragging_prim(self):
        ...
    @dragging_prim.setter
    def dragging_prim(self, prim: pxr.Usd.Prim):
        ...
    @property
    def world_space_pos(self):
        ...
    @world_space_pos.setter
    def world_space_pos(self, world_space_pos: pxr.Gf.Vec3d):
        ...
class UsdShadeDropDelegate(UsdPrimDropDelegate):
    def accepted(self, drop_data: dict):
        ...
    def add_drop_marker(self, drop_data: dict, world_space_pos: pxr.Gf.Vec3d):
        ...
    def bind_material(self, prim_paths, material_path: pxr.Sdf.Path):
        ...
    def handle_prim_drop(self, stage: pxr.Usd.Stage, dropped_prim: pxr.Usd.Prim, dropped_onto: pxr.Usd.Prim, dropped_onto_model: pxr.Usd.Prim):
        ...
    def show_bind_menu(self, prim_path: pxr.Sdf.Path, model_path: pxr.Sdf.Path, material_path: pxr.Sdf.Path):
        ...
    @property
    def binding_strength(self):
        ...
    @property
    def honor_picking_mode(self):
        ...
