from __future__ import annotations
import carb as carb
from carb.eventdispatcher import get_eventdispatcher
import omni as omni
from pxr import UsdGeom
import typing
__all__: list = ['LegacyGridScene', 'LegacyLightScene', 'LegacyAudioScene']
class LegacyAudioScene:
    visible = ...
    def __init__(self, *args, **kwargs):
        ...
    def destroy(self):
        ...
    @property
    def categories(self):
        ...
    @property
    def name(self):
        ...
class LegacyGridScene:
    AUTO_TRACK_PATH: typing.ClassVar[str] = '/app/viewport/grid/trackCamera'
    visible = ...
    def _LegacyGridScene__auto_track_changed(self, *args, **kwargs):
        ...
    def _LegacyGridScene__destroy_view_tracking(self, settings):
        ...
    def _LegacyGridScene__on_stage_opened(self, stage):
        ...
    def _LegacyGridScene__set_grid(self, grid: str):
        ...
    def _LegacyGridScene__setup_view_tracking(self):
        ...
    def _LegacyGridScene__view_changed(self, viewport_api):
        ...
    def _LegacyGridScene__viewport_grid_display_changed(self, item: carb.dictionary._dictionary.Item, event_type: carb.settings._settings.ChangeEventType):
        ...
    def __init__(self, desc: dict, *args, **kwargs):
        ...
    def destroy(self):
        ...
    @property
    def categories(self):
        ...
    @property
    def name(self):
        ...
    @property
    def stage(self):
        ...
    @property
    def usd_context(self):
        ...
class LegacyLightScene:
    visible = ...
    def __init__(self, *args, **kwargs):
        ...
    def destroy(self):
        ...
    @property
    def categories(self):
        ...
    @property
    def name(self):
        ...
