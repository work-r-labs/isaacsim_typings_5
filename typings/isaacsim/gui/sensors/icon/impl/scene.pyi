from __future__ import annotations
import carb as carb
from isaacsim.gui.sensors.icon.impl.manipulator import IconManipulator
from isaacsim.gui.sensors.icon.impl.manipulator import PreventOthers
from isaacsim.gui.sensors.icon.impl.model import IconModel
import omni as omni
from omni import ui
from omni.ui import scene as sc
import typing
__all__: list = ['IconScene']
class IconScene:
    """
    The window with the manupulator
    """
    def __del__(self):
        ...
    def __init__(self, title: str = None, icon_scale: float = 1.0, **kwargs):
        ...
    def _end_drag(self, sender):
        ...
    def clear(self):
        ...
    def destroy(self):
        ...
    @property
    def visible(self):
        ...
    @visible.setter
    def visible(self, value: bool):
        ...
class SensorIcon:
    _instance: typing.ClassVar[SensorIcon]  # value = <isaacsim.gui.sensors.icon.impl.scene.SensorIcon object>
    @staticmethod
    def get_instance():
        ...
    def __init__(self, test = False):
        ...
    def _on_timeline_event(self, event):
        ...
    def _on_visible_changed(self, *args):
        ...
    def add_sensor_icon(self, prim_path, icon_url = None):
        ...
    def clear(self):
        ...
    def destroy(self):
        ...
    def get_model(self):
        ...
    def hide_sensor_icon(self, prim_path):
        ...
    def register_toggle_all_fn(self, fn):
        ...
    def remove_sensor_icon(self, prim_path):
        ...
    def set_icon_click_fn(self, prim_path, call_back):
        ...
    def show_sensor_icon(self, prim_path):
        ...
    def unregister_toggle_all_fn(self, fn):
        ...
VISIBLE_SETTING: str = '/persistent/exts/isaacsim.gui.sensors.icon/visible_on_startup'
