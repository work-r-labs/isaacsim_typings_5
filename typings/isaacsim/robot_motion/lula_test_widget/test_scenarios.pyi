from __future__ import annotations
import carb as carb
from isaacsim.core.api.objects.cone import VisualCone
from isaacsim.core.api.objects.cuboid import VisualCuboid
from isaacsim.core.api.objects.cylinder import VisualCylinder
from isaacsim.core.prims.impl.single_xform_prim import SingleXFormPrim
from isaacsim.core.utils.numpy.rotations import rot_matrices_to_quats
from isaacsim.core.utils.prims import delete_prim
from isaacsim.core.utils.prims import is_prim_path_valid
from isaacsim.core.utils.rotations import euler_angles_to_quat
from isaacsim.core.utils.string import find_unique_string_name
from isaacsim.core.utils.types import ArticulationAction
from isaacsim.robot_motion.lula_test_widget.controllers import KinematicsController
from isaacsim.robot_motion.lula_test_widget.controllers import TrajectoryController
from isaacsim.robot_motion.motion_generation.articulation_kinematics_solver import ArticulationKinematicsSolver
from isaacsim.robot_motion.motion_generation.articulation_motion_policy import ArticulationMotionPolicy
from isaacsim.robot_motion.motion_generation.articulation_trajectory import ArticulationTrajectory
from isaacsim.robot_motion.motion_generation.lula.kinematics import LulaKinematicsSolver
from isaacsim.robot_motion.motion_generation.lula.motion_policies import RmpFlow
from isaacsim.robot_motion.motion_generation.lula.trajectory_generator import LulaTaskSpaceTrajectoryGenerator
from isaacsim.robot_motion.motion_generation.motion_policy_controller import MotionPolicyController
import numpy as np
__all__: list[str] = ['ArticulationAction', 'ArticulationKinematicsSolver', 'ArticulationMotionPolicy', 'ArticulationTrajectory', 'KinematicsController', 'LulaKinematicsSolver', 'LulaTaskSpaceTrajectoryGenerator', 'LulaTestScenarios', 'MotionPolicyController', 'RmpFlow', 'SingleXFormPrim', 'TrajectoryController', 'VisualCone', 'VisualCuboid', 'VisualCylinder', 'carb', 'delete_prim', 'euler_angles_to_quat', 'find_unique_string_name', 'is_prim_path_valid', 'np', 'rot_matrices_to_quats']
class LulaTestScenarios:
    def __init__(self):
        ...
    def _create_frame_prim(self, position, orientation, parent_prim_path):
        ...
    def _create_target(self, position = None, orientation = None):
        ...
    def _create_wall(self, position = None, orientation = None):
        ...
    def add_waypoint(self):
        ...
    def create_trajectory_controller(self, articulation, ee_frame):
        ...
    def delete_waypoint(self):
        ...
    def full_reset(self):
        ...
    def get_ik_frames(self):
        ...
    def get_next_action(self, **scenario_params):
        ...
    def get_rmpflow(self):
        ...
    def initialize_ik_solver(self, robot_description_path, urdf_path):
        ...
    def on_custom_trajectory(self, robot_description_path, urdf_path):
        ...
    def on_ik_follow_target(self, articulation, ee_frame_name):
        ...
    def on_rmpflow_follow_sinusoidal_target(self, articulation, **rmp_config):
        ...
    def on_rmpflow_follow_target_obstacles(self, articulation, **rmp_config):
        ...
    def scenario_reset(self):
        ...
    def set_use_orientation(self, use_orientation):
        ...
    def stop_visualize_ee_frame(self):
        ...
    def toggle_rmpflow_debug_mode(self):
        ...
    def update_scenario(self, **scenario_params):
        ...
    def visualize_ee_frame(self, articulation, ee_frame):
        ...
